@page "/chatsList"

@inject IChatHttpClient httpClient
@inject NavigationManager navManager

<h3>Your chats</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateChatsList">Refresh</MudButton>
<MudDivider />
<MudTextField @bind-Value="chatName" Label="Name of a new chat" Variant="Variant.Filled" />
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewChat" Style="width: 200px">Create new chat</MudButton>
<MudDivider />

@if (groupChats is null)
{
    <p style="margin: 15px"><em>We got a problem here</em></p>
}
else
{
    <div style="max-height: 400px; overflow-y:scroll">
        <MudList Clickable="true">
            @foreach (var chat in groupChats)
            {
                <MudListItem @onclick="@(async () => await GroupClicked(chat.Id))">
                    @chat.Name
                </MudListItem>
            }
        </MudList>
    </div>
}

@code {
    IEnumerable<GroupChat> groupChats { get; set; } = new List<GroupChat>();
    private string chatName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateChatsList();
    }

    private async Task UpdateChatsList()
    {
        groupChats = await httpClient.GetUserGroupChatsAsync();
    }

    private async Task GroupClicked(Guid chatId)
    {
        navManager.NavigateTo($"/groupChat/{Convert.ToString(chatId)}");
    }

    private async Task CreateNewChat()
    {
        await httpClient.CreateNewGroupChatAsync(new CreateGroupChatRequest { Name = chatName });
        await UpdateChatsList();
    }
}
