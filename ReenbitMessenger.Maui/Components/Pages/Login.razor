@page "/login"

@inject NavigationManager navManager
@inject IAuthHttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService ls
@inject ILogger<Login> logger

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit" style="padding: 10px; max-width: 300px">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="email">User name</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary" style="margin-top: 10px">Login</button>
</EditForm>


@code {
    private LoginModel loginModel = new LoginModel();

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    private async Task Submit()
    {
        var loginRequest = new LoginRequest
        {
            Username = loginModel.Username,
            Password = loginModel.Password
        };

        var token = await httpClient.LogInAsync(loginRequest);
        if (token is null)
        {
            logger.LogWarning("token is null");
        }
        else
        {
            await ls.SetItemAsStringAsync("jwtToken", token);

            logger.LogWarning(token);

            navManager.NavigateTo("", true);
        }
    }
}
