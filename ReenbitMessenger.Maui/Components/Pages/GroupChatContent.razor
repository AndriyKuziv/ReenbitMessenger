@page "/groupChat/{ChatId}"

@inject IChatHttpClient httpClient
@inject IDialogService DialogService
@inject ILocalStorageService localStorage
@inject NavigationManager navManager
@inject ChatHubService chatHubService


<style>
    .limited {
        max-width: 200px
    }
</style>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConnectToGroupChat" Style="margin: 30px">Refresh</MudButton>
<MudDivider />

@if(groupChat is null)
{
    <h3>We got a problem here</h3>
}
else
{
    <h3>@groupChat.Name</h3>
    <MudContainer>
    <MudGrid>
            <MudItem xs="12" md="3">
            <MudPaper Style="padding: 10px">
                <h4>Members</h4>
                    <MudButton @onclick="OpenAddUserDialog" Variant="Variant.Filled" Color="Color.Primary">
                        Add user
                    </MudButton>
                    <MudButton @onclick="OpenRemoveUserDialog" Variant="Variant.Filled" Color="Color.Primary">
                        Delete user
                    </MudButton>
                <MudList Clickable="true">
                        @if (groupChat.GroupChatMembers != null)
                        {
                            @foreach (var member in groupChat.GroupChatMembers)
                            {
                                <MudListItem Style="margin: 20px">- @member.User.UserName</MudListItem>
                            }
                        }
                    </MudList>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="9">
            <MudPaper Style="padding: 10px">
                <h4>Messages</h4>
                    <div style="height: 300px; overflow-y:scroll">
                        <MudList Clickable="true" id="messages-list">
                            @if (groupChat.GroupChatMessages != null)
                            {
                                @foreach (var message in groupChat.GroupChatMessages)
                                {
                                    <MudListItem>
                                        <MudText>@message.SenderUser.UserName: @message.Text</MudText>
                                        <MudText>@message.SentTime.ToString("HH:mm")</MudText>
                                    </MudListItem>
                                    <MudDivider />
                                }
                            }
                        </MudList>
                    </div>
                    <MudTextField @bind-Value="@messageText" Label="Write your message"
                                  Variant="Variant.Filled" Class="limited"></MudTextField>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage">Send</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
    </MudContainer>
}



@code {
    private string messageText { get; set; } = string.Empty;
    private GroupChat groupChat { get; set; } = new GroupChat();

    [Parameter]
    public string ChatId { get; set; } = string.Empty;

    public string ChosenUserId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await chatHubService.InitializeAsync(await localStorage.GetItemAsStringAsync("jwt"));

        await Connect();
        await ConnectToGroupChat();
    }


    private async Task OpenAddUserDialog()
    {
        var parameters = new DialogParameters { ["Id"] = ChosenUserId };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<EnterIdDialog>("Enter id of a user to add", options: closeOnEscapeKey, parameters: parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            string userToAddId = Convert.ToString(result.Data);

            await AddUserToChat(userToAddId);
        }
    }

    private async Task OpenRemoveUserDialog()
    {
        var parameters = new DialogParameters { ["Id"] = ChosenUserId };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<EnterIdDialog>("Enter id of a user to delete", options: closeOnEscapeKey, parameters: parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            string userToDeleteId = Convert.ToString(result.Data);

            await RemoveUserFromChat(userToDeleteId);
        }
    }


    private async Task Connect()
    {
        await chatHubService.SubscribeAsync<GroupChatMessage>("ReceiveMessage", OnMessageReceived);
        await chatHubService.SubscribeAsync<IEnumerable<GroupChatMember>>("ReceiveMembers", OnMembersReceived);
        await chatHubService.SubscribeAsync<GroupChat>("ReceiveFullGroupChat", OnChatReceived);
        await chatHubService.SubscribeAsync<IEnumerable<string>>("RemoveMembers", OnMembersRemoved);

        await chatHubService.StartAsync();
    }

    private async Task ConnectToGroupChat()
    {
        await chatHubService.ConnectToGroupChatAsync(ChatId);
    }

    private async Task SendMessage()
    {
        await chatHubService.SendMessageAsync(ChatId, new SendMessageToGroupChatRequest() { Text = messageText });
        messageText = string.Empty;
    }

    private async Task AddUserToChat(string userId)
    {
        await chatHubService.AddUsersToGroupChatAsync(ChatId, new AddUsersToGroupChatRequest { UsersIds = new List<string> { userId } });
    }

    private async Task RemoveUserFromChat(string userId)
    {
        await chatHubService.RemoveUsersFromGroupChatAsync(ChatId, new RemoveUsersFromGroupChatRequest { UsersIds = new List<string> { userId } });
    }


    private void OnChatReceived(GroupChat receivedGroupChat)
    {
        InvokeAsync(() =>
        {
            groupChat = receivedGroupChat;

            StateHasChanged();
        });
    }

    private void OnMessageReceived(GroupChatMessage message)
    {
        InvokeAsync(() =>
        {
            if (groupChat != null && groupChat.GroupChatMessages != null)
            {
                groupChat.GroupChatMessages.Add(message);
            }
            StateHasChanged();
        });
    }

    private void OnMembersReceived(IEnumerable<GroupChatMember> members)
    {
        InvokeAsync(() =>
        {
            if (groupChat != null && groupChat.GroupChatMembers != null)
            {
                groupChat.GroupChatMembers.AddRange(members);
            }
            StateHasChanged();
        });
    }

    private void OnMembersRemoved(IEnumerable<string> removedMembersIds)
    {
        InvokeAsync(() =>
        {
            if(groupChat != null && groupChat.GroupChatMembers != null)
            {
                groupChat.GroupChatMembers.RemoveAll(mem => removedMembersIds.Contains(mem.UserId));
                StateHasChanged();
            }
        });
    }

    public async ValueTask DisposeAsync()
    {
        await chatHubService.Dispose();
    }
}
