@page "/groupChat/{ChatId}"

@inject IChatHttpClient httpClient
@inject IDialogService DialogService
@inject ILocalStorageService localStorage
@inject NavigationManager navManager
@inject ChatHubService chatHubService
@inject IJSRuntime Js

<style>
    .limited {
        max-width: 200px
    }
</style>

@if(groupChat is null)
{
    <h3>We got a problem here</h3>
}
else
{
    <h3>@groupChat.Name</h3>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OpenLeaveChatDialog">Leave chat</MudButton>
    <MudDivider/>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenDeleteChatMessageDialog">DeleteMessage</MudButton>

    <MudContainer>
    <MudGrid Spacing="1" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="padding: 10px;">
                <h4>Members</h4>
                    <MudButton @onclick="OpenAddUserDialog" Variant="Variant.Filled" Color="Color.Primary">
                        Add user
                    </MudButton>
                    <MudButton @onclick="OpenRemoveUserDialog" Variant="Variant.Filled" Color="Color.Primary">
                        Delete user
                    </MudButton>
                    <div style="height: 30vh; overflow-y:auto">
                        <MudList Clickable="true" Style="padding: 10px">
                            @if (groupChat.GroupChatMembers != null)
                            {
                                @foreach (var member in groupChat.GroupChatMembers)
                                {
                                    <MudListItem OnClick="() => AddToClipboard(member.UserId)">- @member.User.UserName</MudListItem>
                                }
                            }
                        </MudList>
                    </div>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Width="50vw" Style="padding: 10px" id="scroll-paper">
                    <h4>Messages</h4>
                    <div id="scroll-container" @onscroll="IsUsed ? OnScrolled : null"
                        style="overflow-y:auto; height: 45vh; display: flex; flex-direction:column-reverse">
                        <MudList Clickable="true" id="messages-list">
                            <MudListItem id="last-item"></MudListItem>
                            @if (groupChat.GroupChatMessages != null)
                            {
                                @foreach (var message in groupChat.GroupChatMessages)
                                {
                                    <ContextMenuTrigger MenuId="cont-menu">
                                        <MudListItem OnClick="() => AddToClipboard(Convert.ToString(message.Id))">
                                            <MudText>@message.SenderUser.UserName: @message.Text</MudText>
                                            <MudText>@message.SentTime.ToString("HH:mm")</MudText>
                                        </MudListItem>
                                    </ContextMenuTrigger>
                                    <MudDivider />
                                }
                            }
                        </MudList>
                    </div>
                    <MudTextField @bind-Value="@messageText" Label="Write your message"
                                  Variant="Variant.Filled"></MudTextField>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage">Send</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public string ChatId { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await Js.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/GroupChatContent.razor.js");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await chatHubService.InitializeAsync(await localStorage.GetItemAsStringAsync("jwt"));
        await Setup();

        await ConnectToGroupChat();
        await GetFullGroupChat();
    }
}
