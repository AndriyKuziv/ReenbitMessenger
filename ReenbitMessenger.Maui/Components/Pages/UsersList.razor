@page "/usersList"

@inject IUserHttpClient httpClient
@using System.Linq.Expressions

<style>
    .limited{
        max-width: 200px
    }
</style>

<h3>UsersList</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Refresh">Refresh</MudButton>
<MudDivider />

@if (users is null)
{
    <p style="margin: 15px"><em>We got a problem here</em></p>
}
else
{
    <MudSelect Label="Order type" @bind-Value="usersFilterModel.Ascending" Class="limited">
        <MudSelectItem Value="@(true)">Ascending</MudSelectItem>
        <MudSelectItem Value="@(false)">Descending</MudSelectItem>
    </MudSelect>

    <MudSelect Label="Order by" @bind-Value="usersFilterModel.OrderBy" Class="limited">
        <MudSelectItem Value="@("Id")">Id</MudSelectItem>
        <MudSelectItem Value="@("Username")">Username</MudSelectItem>
        <MudSelectItem Value="@("Email")">Email</MudSelectItem>
    </MudSelect>


    <MudSelect T="int" Label="Page size" Value=@usersFilterModel.NumberOfUsers ValueChanged=@OnValueChanged Class="limited">
        <MudSelectItem Value="@(2)">2</MudSelectItem>
        <MudSelectItem Value="@(5)">5</MudSelectItem>
        <MudSelectItem Value="@(10)">10</MudSelectItem>
        <MudSelectItem Value="@(15)">15</MudSelectItem>
    </MudSelect>

    <MudTextField @bind-Value="usersFilterModel.ValueContains" Label="Row contains"
                  Variant="Variant.Filled" Class="limited"></MudTextField>

    <MudDataGrid T="User" Items="@users" Hideable="true">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" />
            <PropertyColumn Property="x => x.UserName" Title="Username" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
        </Columns>
    </MudDataGrid>

    if (usersFilterModel.Page > 0)
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="MoveBackward">Previous</MudButton>
    }
    if(usersFilterModel.NumberOfUsers == users.Count())
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="MoveForward">Next</MudButton>
    }
}

@code {
    private IEnumerable<User> users { get; set; } = new List<User>();

    private UsersFilterModel usersFilterModel = new UsersFilterModel();

    protected override async Task OnInitializedAsync()
    {
        await UpdateUsersList();
    }
}
