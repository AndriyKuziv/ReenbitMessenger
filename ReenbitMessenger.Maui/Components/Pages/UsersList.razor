@page "/usersList"

@inject IUserHttpClient httpClient
@using System.Linq.Expressions

<h3>UsersList</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Refresh">Refresh</MudButton>
<MudDivider />

@if (users is null)
{
    <p style="margin: 15px"><em>Loading...</em></p>
}
else
{
    <MudSelect Label="Order type" @bind-Value="usersFilterModel.SortOrder" Style="max-width: 200px">
        <MudSelectItem Value="@("Ascending")">Ascending</MudSelectItem>
        <MudSelectItem Value="@("Descending")">Descending</MudSelectItem>
    </MudSelect>

    <MudSelect Label="Order by" @bind-Value="usersFilterModel.OrderBy" Style="max-width: 200px">
        <MudSelectItem Value="@("Id")">Id</MudSelectItem>
        <MudSelectItem Value="@("Username")">Username</MudSelectItem>
        <MudSelectItem Value="@("Email")">Email</MudSelectItem>
    </MudSelect>


    <MudSelect T="int" Label="Page size" Value=@usersFilterModel.NumberOfUsers ValueChanged=@OnValueChanged Style="max-width: 200px">
        <MudSelectItem Value="@(2)">2</MudSelectItem>
        <MudSelectItem Value="@(5)">5</MudSelectItem>
        <MudSelectItem Value="@(10)">10</MudSelectItem>
        <MudSelectItem Value="@(15)">15</MudSelectItem>
    </MudSelect>

    <MudDataGrid T="User" Items="@users" Hideable="true">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" />
            <PropertyColumn Property="x => x.UserName" Title="Username" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
        </Columns>
    </MudDataGrid>

    if (usersFilterModel.Page > 0)
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="MoveBackward">Previous</MudButton>
    }
    if(usersFilterModel.NumberOfUsers == users.Count())
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="MoveForward">Next</MudButton>
    }
}

@code {
    private IEnumerable<User> users { get; set; } = new List<User>();

    private UsersFilterModel usersFilterModel = new UsersFilterModel();

    private class UsersFilterModel
    {
        public int NumberOfUsers { get; set; } = 5;
        public int Page { get; set; } = 0;
        public string ValueContains { get; set; } = "";
        public string SortOrder { get; set; } = "Ascending";
        public string OrderBy { get; set; } = "Username";
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateUsersList();
    }

    private async Task UpdateUsersList()
    {
        users = await httpClient.GetUsersAsync(new GetUsersRequest
        {
            NumberOfUsers = usersFilterModel.NumberOfUsers,
            Page = usersFilterModel.Page,
            ValueContains = usersFilterModel.ValueContains,
            SortOrder = usersFilterModel.SortOrder,
            OrderBy = usersFilterModel.OrderBy
        });
        // users = new List<User>
        // {
        //     new User { Id = "1", Email = "user1@gmail.com", UserName = "user1" },
        //     new User { Id = "2", Email = "ser@gmail.com", UserName = "user2" },
        //     new User { Id = "3", Email = "user3@gmail.com", UserName = "user3" },
        //     new User { Id = "4", Email = "test@gmail.com", UserName = "user4" },
        // };
    }

    private async Task OnValueChanged(int newValue)
    {
        usersFilterModel.NumberOfUsers = newValue;

        await UpdateUsersList();
    }

    private async Task Refresh()
    {
        usersFilterModel.Page = 0;

        await UpdateUsersList();
    }

    private async Task MoveForward()
    {
        usersFilterModel.Page++;
        await UpdateUsersList();
    }

    private async Task MoveBackward()
    {
        usersFilterModel.Page--;
        await UpdateUsersList();
    }
}
